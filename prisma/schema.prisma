// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  super_admin
  admin
  user
}

enum Gender {
  male
  female
  other
}

model User {
  id         String   @id @default(uuid())
  name       String?
  email      String   @unique
  password   String
  role       Role
  contact    String?
  gender     Gender?
  address    String?
  profileImg Avatar?  @relation(fields: [avatarId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  avatarId   String?  @unique

  @@map("users")
}

model Avatar {
  id   String @id @default(uuid())
  c_id String
  url  String

  User User?

  @@map("avatars")
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  attractions Attractions[]

  @@map("categories")
}

model Country {
  id          String        @id @default(uuid())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  cities      City[]
  attractions Attractions[]

  @@map("countries")
}

model City {
  id        String   @id @default(uuid())
  name      String   @unique
  countryId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  country     Country       @relation(fields: [countryId], references: [id])
  attractions Attractions[]

  @@map("cities")
}

model Attractions {
  id          String   @id @default(uuid())
  tittle      String   @unique
  banarTittle String
  price       Float
  tripDate    DateTime
  tripTime    String
  duration    String

  categoryId String
  countryId  String
  cityId     String

  category Category @relation(fields: [categoryId], references: [id])
  country  Country  @relation(fields: [countryId], references: [id])
  city     City     @relation(fields: [cityId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  images    Images[]

  @@map("attractions")
}

model Images {
  id           String @id @default(uuid())
  url          String
  c_id         String
  attractionId String @unique

  attraction Attractions @relation(fields: [attractionId], references: [id])

  @@map("images")
}
